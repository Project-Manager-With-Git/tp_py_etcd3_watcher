from typing import Iterator, AsyncIterator
from pyloggerhelper import log
from etcd3.etcd3 import PutEvent, DeleteEvent
from etcdproxy import EtcdProxy

etcd = EtcdProxy()


def handdler(events_iterator: Iterator) -> None:

    for event in events_iterator:
        try:
            if isinstance(event, PutEvent):
                key = event.kv.key.decode("utf-8")
                value = event.kv.value.decode("utf-8")
                log.info("get put event", key=key, value=value)

            elif isinstance(event, DeleteEvent):
                key = event.kv.key.decode("utf-8")
                log.info("get delete event", key=key)
        except Exception as e:
            log.error("event watch error", e=e)

async def aiohanddler(events_iterator: AsyncIterator) -> None:
    async for event in events_iterator:
        try:
            if isinstance(event, PutEvent):
                key = event.kv.key.decode("utf-8")
                value = event.kv.value.decode("utf-8")
                log.info("get put event", key=key, value=value)

            elif isinstance(event, DeleteEvent):
                key = event.kv.key.decode("utf-8")
                log.info("get delete event", key=key)
        except Exception as e:
            log.error("event watch error", e=e)